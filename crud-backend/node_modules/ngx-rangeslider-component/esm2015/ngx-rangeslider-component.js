import { Component, ViewChild, ElementRef, HostListener, forwardRef, Renderer2, IterableDiffers, Input, Output, EventEmitter, Directive, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
const KEY_CODE = {
    RIGHT_ARROW: 39,
    LEFT_ARROW: 37,
};
KEY_CODE[KEY_CODE.RIGHT_ARROW] = 'RIGHT_ARROW';
KEY_CODE[KEY_CODE.LEFT_ARROW] = 'LEFT_ARROW';
/** @type {?} */
const noop = () => { };
class RangeSliderComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} iterableDiffers
     */
    constructor(elementRef, renderer, iterableDiffers) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.iterableDiffers = iterableDiffers;
        this.minSliderClicked = false;
        this.maxSliderClicked = false;
        this.minSelected = false;
        this.maxSelected = false;
        this.toolTip = true;
        this.combineToolTip = false;
        this.minSliderTouched = false;
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.toolTips = [true, true];
        this.onRangeChange = new EventEmitter();
        this.iterableDiffer = this.iterableDiffers.find([]).create(null);
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        let changes = this.iterableDiffer.diff(this.range);
        if (changes) {
            this.onChangeCallback(this.range);
            this.onTouchedCallback(this.range);
            this.onRangeChange.emit(this.range);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        if (this.range) {
            this.getWidth();
        }
    }
    /**
     * @param {?} clas
     * @return {?}
     */
    sethighlightClass(clas) {
        if (clas && this.sliderHilight) {
            this.renderer.removeClass(this.sliderHilight.nativeElement, 'dhighlightClass');
            this.renderer.addClass(this.sliderHilight.nativeElement, clas);
        }
    }
    /**
     * @param {?} clas
     * @return {?}
     */
    setBarClass(clas) {
        if (clas && this.bar) {
            this.renderer.removeClass(this.bar.nativeElement, 'dbarClass');
            this.renderer.addClass(this.bar.nativeElement, clas);
        }
    }
    /**
     * @param {?} clas
     * @return {?}
     */
    setSliderClass(clas) {
        if (clas && this.minSlider && this.maxSlider) {
            this.renderer.removeClass(this.minSlider.nativeElement, 'dsliderClass');
            this.renderer.removeClass(this.maxSlider.nativeElement, 'dsliderClass');
            this.renderer.addClass(this.minSlider.nativeElement, clas);
            this.renderer.addClass(this.maxSlider.nativeElement, clas);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value) {
            if (value[0] === null) {
                value[0] = this.min;
            }
            else if (value[1] === null) {
                value[1] = this.max;
            }
            else {
                if (this.range) {
                    /** @type {?} */
                    let prevRange = this.rangeCache.slice(0);
                    if (value[0] > prevRange[1]) {
                        value[0] = prevRange[1];
                    }
                    else if (value[0] < this.min) {
                        value[0] = this.min;
                    }
                    else if (value[1] < prevRange[0]) {
                        value[1] = prevRange[0];
                    }
                    else if (value[1] > this.max) {
                        value[1] = this.max;
                    }
                }
            }
            this.update(value);
        }
    }
    /**
     * @param {?} range
     * @return {?}
     */
    update(range) {
        this.range = [...range];
        this.rangeCache = (JSON.parse(JSON.stringify(range)));
        this.setBarClass(this.barClass);
        this.setSliderClass(this.sliderClass);
        this.sethighlightClass(this.highlightClass);
        this.getWidth();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    minTouched(event) {
        /** @type {?} */
        let evt = event.changedTouches[0];
        this.minMouseDown(evt);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    maxTouched(event) {
        /** @type {?} */
        let evt = event.changedTouches[0];
        this.maxMouseDown(evt);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    minMouseDown(event) {
        this.minSliderClicked = true;
        this.minSelected = true;
        this.maxSliderClicked = false;
        this.maxSelected = false;
        this.minSliderIntialLeft = event.target.offsetLeft;
        this.intialMinMouseX = event.clientX;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    maxMouseDown(event) {
        this.maxSliderClicked = true;
        this.maxSelected = true;
        this.minSliderClicked = false;
        this.minSelected = false;
        this.maxSliderIntialLeft = event.target.offsetLeft;
        this.intialMaxMouseX = event.clientX;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    touchMove(event) {
        /** @type {?} */
        let evt = event.changedTouches[0];
        this.mouseMove(evt);
    }
    /**
     * @param {?} onChange
     * @return {?}
     */
    registerOnChange(onChange) {
        this.onChangeCallback = onChange;
    }
    /**
     * @param {?} onTouched
     * @return {?}
     */
    registerOnTouched(onTouched) {
        this.registerOnTouched = onTouched;
    }
    /**
     * @return {?}
     */
    validate() {
        return null;
    }
    /**
     * @param {?} num
     * @return {?}
     */
    getlength(num) {
        return String(num).match(/\d/g).length;
    }
    /**
     * @return {?}
     */
    getWidth() {
        if (this.bar && this.minSlider && this.range && this.range[0] !== undefined) {
            this.sliderWidth = this.minSlider.nativeElement.offsetWidth;
            this.sliderHeight = this.minSlider.nativeElement.offsetHeight;
            this.toolTipTop = (this.sliderHeight + 10) * -1;
            this.barWidth = this.bar.nativeElement.offsetWidth;
            if (this.sliderWidth && this.barWidth) {
                this.rangeDiff = this.max - this.min;
                this.rangeInPixels = this.barWidth - this.sliderWidth;
                if (this.barWidth && this.sliderWidth) {
                    this.valToPixelFactor = ((this.rangeInPixels) / this.rangeDiff);
                }
                this.minSliderLeft = (this.range[0] - this.min) * this.valToPixelFactor;
                this.maxSliderLeft = (this.range[1] - this.min) * this.valToPixelFactor;
            }
            this.highlightDimensions();
        }
    }
    /**
     * @return {?}
     */
    highlightDimensions() {
        this.highlightLeft = this.minSliderLeft + (this.sliderWidth / 2);
        this.highlightWidth = this.maxSliderLeft - this.minSliderLeft;
        if (this.range[0] !== undefined) {
            this.minToolTipWidth = this.getlength(this.range[0].toString());
            /** @type {?} */
            let cond = this.minToolTipWidth * 8 + this.minSliderLeft + 8;
            if (cond > this.maxSliderLeft && this.toolTips[0] && this.toolTips[1]) {
                this.toolTip = false;
                this.combineToolTip = true;
                this.combineToolTipWidth = this.getlength(`${this.range[0]}-${this.range[1]}`) * 8;
                /** @type {?} */
                let maxLeft = this.rangeInPixels - this.combineToolTipWidth;
                this.combineToolTipLeft = this.minSliderLeft < maxLeft ? this.minSliderLeft : maxLeft;
            }
            else {
                this.toolTip = true;
                this.combineToolTip = false;
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clickedOnBar(event) {
        this.minSelected = false;
        this.maxSelected = false;
        /** @type {?} */
        let targetId = event.target.id;
        /** @type {?} */
        let left = event.offsetX;
        if (targetId === 'bar') {
            if (left < this.minSliderLeft) {
                /** @type {?} */
                let value = this.pixToVal(this.min, left);
                /** @type {?} */
                const finalVal = this.stepr(value);
                this.range[0] = finalVal <= this.min ? this.min : finalVal;
                this.minSliderLeft = this.valToPixel(this.range[0]);
            }
            else if (left > this.maxSliderLeft) {
                if (left >= (this.rangeInPixels)) {
                    this.maxSliderLeft = this.rangeInPixels;
                    this.range[1] = this.max;
                }
                else {
                    /** @type {?} */
                    let value = this.pixToVal(this.min, left);
                    this.range[1] = this.stepr(value);
                    this.maxSliderLeft = this.valToPixel(this.range[1]);
                    
                }
            }
        }
        this.highlightDimensions();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clickedOnhighlight(event) {
        this.minSelected = false;
        this.maxSelected = false;
        /** @type {?} */
        const left = event.offsetX;
        /** @type {?} */
        const cond = (this.highlightWidth / 2);
        if (left <= cond) {
            /** @type {?} */
            const orgLeft = this.minSliderLeft + (this.sliderWidth / 2) + left;
            /** @type {?} */
            let value = this.pixToVal(this.min, orgLeft);
            this.range[0] = this.stepr(value);
            this.minSliderLeft = this.valToPixel(this.range[0]);
        }
        else if (left > cond) {
            /** @type {?} */
            const orgLeft = this.minSliderLeft + (this.sliderWidth / 2) + left;
            /** @type {?} */
            let value = this.pixToVal(this.min, orgLeft);
            this.range[1] = this.stepr(value);
            this.maxSliderLeft = this.valToPixel(this.range[1]);
        }
        this.highlightDimensions();
    }
    /**
     * @param {?} min
     * @param {?} left
     * @return {?}
     */
    pixToVal(min, left) {
        /** @type {?} */
        let value = Number((min + left * (1 / this.valToPixelFactor)).toFixed(2));
        return value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    stepr(value) {
        if (this.step) {
            /** @type {?} */
            let fin = value - Math.floor(value);
            if (fin >= 0.5) {
                value = Math.ceil(value);
            }
            else {
                value = Math.floor(value);
            }
            /** @type {?} */
            let remainder = value % this.step;
            if (remainder === 0) {
                return value;
            }
            else {
                if (remainder >= (this.step / 2)) {
                    value = value + (this.step - remainder);
                }
                else {
                    value = value - remainder;
                }
            }
        }
        return value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    valToPixel(value) {
        /** @type {?} */
        let pixel = this.valToPixelFactor * (value - this.min);
        return pixel;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    mouseMove(event) {
        if (this.minSelected || this.maxSelected) {
            if (this.minSelected) {
                this.minChange = event.clientX - this.intialMinMouseX;
                /** @type {?} */
                let left = this.minSliderIntialLeft + this.minChange;
                /** @type {?} */
                let value = this.pixToVal(this.min, left);
                if (value <= this.range[1]) {
                    if (value <= this.min) {
                        this.minSliderLeft = 0;
                        this.range[0] = this.min;
                    }
                    else {
                        /** @type {?} */
                        const finalVal = this.stepr(value);
                        this.range[0] = finalVal <= this.range[1] ? finalVal : this.range[1];
                        this.minSliderLeft = this.valToPixel(this.range[0]);
                    }
                }
            }
            else if (this.maxSelected) {
                this.maxChange = event.clientX - this.intialMaxMouseX;
                /** @type {?} */
                let left = this.maxSliderIntialLeft + this.maxChange;
                /** @type {?} */
                let value = this.pixToVal(this.min, left);
                if (value >= this.range[0]) {
                    if (value >= this.max) {
                        this.maxSliderLeft = this.rangeInPixels;
                        this.range[1] = this.max;
                    }
                    else {
                        /** @type {?} */
                        let final = this.stepr(value);
                        this.range[1] = final > this.range[0] ? final <= this.max ? final : this.max : this.range[0];
                        this.maxSliderLeft = this.valToPixel(this.range[1]);
                    }
                }
            }
            this.highlightDimensions();
        }
        return false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    mouseUp(event) {
        this.minSelected = false;
        this.maxSelected = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clickedOutside(event) {
        if (event) {
            this.minSliderClicked = false;
            this.maxSliderClicked = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        /** @type {?} */
        let step = this.step ? this.step : 1;
        if (this.minSliderClicked || this.maxSliderClicked) {
            if (this.minSliderClicked) {
                if (event.keyCode === KEY_CODE.LEFT_ARROW) {
                    /** @type {?} */
                    let left = this.minSliderLeft - (step * this.valToPixelFactor);
                    /** @type {?} */
                    let value = this.pixToVal(this.min, left);
                    if (value >= this.min) {
                        this.range[0] = this.stepr(value);
                        
                        this.minSliderLeft = this.valToPixel(this.range[0]);
                        this.minSliderIntialLeft = this.minSliderLeft;
                    }
                }
                else if (event.keyCode === KEY_CODE.RIGHT_ARROW) {
                    /** @type {?} */
                    let left = this.minSliderLeft + (step * this.valToPixelFactor);
                    /** @type {?} */
                    let value = this.pixToVal(this.min, left);
                    if (value <= this.range[1]) {
                        this.range[0] = this.stepr(value);
                        this.minSliderLeft = this.valToPixel(this.range[0]);
                        this.minSliderIntialLeft = this.minSliderLeft;
                    }
                }
            }
            else if (this.maxSliderClicked) {
                if (event.keyCode === KEY_CODE.LEFT_ARROW) {
                    /** @type {?} */
                    let left = this.maxSliderLeft - (step * this.valToPixelFactor);
                    /** @type {?} */
                    let value = this.pixToVal(this.min, left);
                    if (value >= this.range[0]) {
                        this.range[1] = this.stepr(value);
                        
                        this.maxSliderLeft = this.valToPixel(this.range[1]);
                        this.maxSliderIntialLeft = this.maxSliderLeft;
                    }
                }
                else if (event.keyCode === KEY_CODE.RIGHT_ARROW) {
                    /** @type {?} */
                    let left = this.maxSliderLeft + (step * this.valToPixelFactor);
                    /** @type {?} */
                    let value = this.pixToVal(this.min, left);
                    if (value <= this.max) {
                        this.range[1] = this.stepr(value);
                        this.maxSliderLeft = this.valToPixel(this.range[1]);
                        this.maxSliderIntialLeft = this.maxSliderLeft;
                    }
                }
            }
            this.highlightDimensions();
        }
    }
}
RangeSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'range-slider',
                template: `
<div (clickOutside)="clickedOutside($event)" id="bar"  #bar   class="slidersContainer dbarClass" 
  (click)="clickedOnBar($event)"  (touchmove)="touchMove($event)"
  (touchend)="mouseUp($event)">

      

      <span style="position:absolute" *ngIf="range && toolTip && toolTips[0]"  [style.top.px]="toolTipTop" [style.left.px]="minSliderLeft" >{{range[0]}}</span>
      <span style="position:absolute" *ngIf="range && toolTip && toolTips[1]" [style.top.px]="toolTipTop" [style.left.px]="maxSliderLeft" >{{range[1]}}</span>
      <span style="position:absolute" *ngIf="range && combineToolTip" [style.top.px]="toolTipTop" [style.left.px]="combineToolTipLeft"  >{{range[0]}}-{{range[1]}}</span> 

  <div #minSlider   class="dslider minSlider dsliderClass" (mousedown)="minMouseDown($event)"  
  [style.left.px]="minSliderLeft" (mouseup)="mouseUp($event)" (touchstart)="minTouched($event)">
  
</div>

  <div #maxSlider class="dslider maxSlider dsliderClass" (mousedown)="maxMouseDown($event)" 
   [style.left.px]="maxSliderLeft" (mouseup)="mouseUp($event)" (touchstart)="maxTouched($event)">
   
  </div>

  <div  #sliderHilight class="sliderHilight dhighlightClass" (click)="clickedOnhighlight($event)"
  [style.width.px]="highlightWidth" [style.left.px]="highlightLeft" ></div>
  </div>`,
                styles: [`div{-webkit-box-sizing:border-box;box-sizing:border-box}.slidersContainer{position:relative;margin:20px 0}.dslider{position:absolute;cursor:pointer;bottom:-50%}.minSlider{z-index:1010}.maxSlider{z-index:1015}.sliderHilight{position:absolute;z-index:1005;height:inherit}.dbarClass{width:100%;height:10px;background:#d3d3d3}.dsliderClass{width:20px;height:20px;background:#fff;border:1px solid #4169e1}.dhighlightClass{background:#4169e1}.tooltipText{text-align:center;padding:5px 0;position:absolute;bottom:72%;left:13%}`],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => RangeSliderComponent),
                        multi: true
                    },
                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => RangeSliderComponent), multi: true }
                ]
            },] },
];
/** @nocollapse */
RangeSliderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: IterableDiffers }
];
RangeSliderComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    toolTips: [{ type: Input }],
    step: [{ type: Input }],
    onRangeChange: [{ type: Output }],
    bar: [{ type: ViewChild, args: ['bar',] }],
    minSlider: [{ type: ViewChild, args: ['minSlider',] }],
    maxSlider: [{ type: ViewChild, args: ['maxSlider',] }],
    sliderHilight: [{ type: ViewChild, args: ['sliderHilight',] }],
    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }],
    highlightClass: [{ type: Input }],
    barClass: [{ type: Input }],
    sliderClass: [{ type: Input }],
    mouseMove: [{ type: HostListener, args: ['window:mousemove', ['$event'],] }],
    mouseUp: [{ type: HostListener, args: ['window:mouseup', ['$event'],] }],
    onKeyDown: [{ type: HostListener, args: ['window:keydown', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ClickOutsideDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.clickOutside = new EventEmitter();
    }
    /**
     * @param {?} targetElement
     * @return {?}
     */
    onClick(targetElement) {
        /** @type {?} */
        const clickedInside = this.elementRef.nativeElement.contains(targetElement);
        if (!clickedInside) {
            this.clickOutside.emit(true);
        }
    }
}
ClickOutsideDirective.decorators = [
    { type: Directive, args: [{
                selector: '[clickOutside]'
            },] },
];
/** @nocollapse */
ClickOutsideDirective.ctorParameters = () => [
    { type: ElementRef }
];
ClickOutsideDirective.propDecorators = {
    clickOutside: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event.target'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class RangeSliderModule {
}
RangeSliderModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [RangeSliderComponent, ClickOutsideDirective],
                exports: [RangeSliderComponent, ClickOutsideDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { RangeSliderModule, ClickOutsideDirective as ɵb, RangeSliderComponent as ɵa };
//# sourceMappingURL=ngx-rangeslider-component.js.map
