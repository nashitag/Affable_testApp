import { ElementRef, Renderer2, IterableDiffers, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare enum KEY_CODE {
    RIGHT_ARROW = 39,
    LEFT_ARROW = 37
}
export declare class RangeSliderComponent implements ControlValueAccessor {
    private elementRef;
    private renderer;
    private iterableDiffers;
    constructor(elementRef: ElementRef, renderer: Renderer2, iterableDiffers: IterableDiffers);
    ngDoCheck(): void;
    private iterableDiffer;
    private valToPixelFactor;
    private minSliderClicked;
    maxSliderClicked: boolean;
    minSliderLeft: number;
    maxSliderLeft: number;
    minSliderIntialLeft: number;
    intialMinMouseX: number;
    minChange: number;
    maxSliderIntialLeft: number;
    intialMaxMouseX: number;
    maxChange: number;
    minSelected: boolean;
    maxSelected: boolean;
    sliderWidth: number;
    barWidth: number;
    rangeDiff: number;
    toolTip: boolean;
    combineToolTip: boolean;
    rangeInPixels: number;
    highlightLeft: number;
    highlightWidth: number;
    minSliderTouched: boolean;
    sliderHeight: number;
    toolTipTop: number;
    combineToolTipLeft: number;
    minToolTipWidth: number;
    combineToolTipWidth: number;
    toolTipLeft: number;
    private onTouchedCallback;
    private onChangeCallback;
    min: number;
    max: number;
    toolTips: boolean[];
    range: number[];
    rangeCache: number[];
    step: number;
    onRangeChange: EventEmitter<number[]>;
    bar: ElementRef;
    minSlider: ElementRef;
    maxSlider: ElementRef;
    sliderHilight: ElementRef;
    numWidth: number;
    onResize(event: any): void;
    highlightClass: string;
    sethighlightClass(clas: string): void;
    barClass: string;
    setBarClass(clas: string): void;
    sliderClass: string;
    setSliderClass(clas: string): void;
    writeValue(value: number[]): void;
    update(range: number[]): void;
    minTouched(event: any): void;
    maxTouched(event: any): void;
    minMouseDown(event: any): void;
    maxMouseDown(event: any): void;
    touchMove(event: any): void;
    registerOnChange(onChange: any): void;
    registerOnTouched(onTouched: any): void;
    validate(): any;
    getlength(num: any): number;
    getWidth(): void;
    highlightDimensions(): void;
    clickedOnBar(event: any): void;
    clickedOnhighlight(event: any): void;
    pixToVal(min: number, left: number): number;
    stepr(value: number): number;
    valToPixel(value: number): number;
    mouseMove(event: any): boolean;
    mouseUp(event: any): void;
    clickedOutside(event: boolean): void;
    onKeyDown(event: KeyboardEvent): void;
}
